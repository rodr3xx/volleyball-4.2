bit32={};local v0=32;local v1=2^v0 ;bit32.bnot=function(v27) v27=v27%v1 ;return (v1-1) -v27 ;end;bit32.band=function(v28,v29) if (v29==255) then return v28%256 ;end if (v29==65535) then return v28%65536 ;end if (v29==4294967295) then return v28%4294967296 ;end v28,v29=v28%v1 ,v29%v1 ;local v30=0;local v31=1;for v49=1,v0 do local v50,v51=v28%2 ,v29%2 ;v28,v29=math.floor(v28/2 ),math.floor(v29/2 );if ((v50 + v51)==2) then v30=v30 + v31 ;end v31=2 * v31 ;end return v30;end;bit32.bor=function(v32,v33) if (v33==255) then return (v32-(v32%256)) + 255 ;end if (v33==65535) then return (v32-(v32%65536)) + 65535 ;end if (v33==4294967295) then return 4294967295;end v32,v33=v32%v1 ,v33%v1 ;local v34=0;local v35=1;for v52=1,v0 do local v53,v54=v32%2 ,v33%2 ;v32,v33=math.floor(v32/2 ),math.floor(v33/2 );if ((v53 + v54)>=1) then v34=v34 + v35 ;end v35=2 * v35 ;end return v34;end;bit32.bxor=function(v36,v37) v36,v37=v36%v1 ,v37%v1 ;local v38=0;local v39=1;for v55=1,v0 do local v56,v57=v36%2 ,v37%2 ;v36,v37=math.floor(v36/2 ),math.floor(v37/2 );if ((v56 + v57)==1) then v38=v38 + v39 ;end v39=2 * v39 ;end return v38;end;bit32.lshift=function(v40,v41) if (math.abs(v41)>=v0) then return 0;end v40=v40%v1 ;if (v41<0) then return math.floor(v40 * (2^v41) );else return (v40 * (2^v41))%v1 ;end end;bit32.rshift=function(v42,v43) if (math.abs(v43)>=v0) then return 0;end v42=v42%v1 ;if (v43>0) then return math.floor(v42 * (2^ -v43) );else return (v42 * (2^ -v43))%v1 ;end end;bit32.arshift=function(v44,v45) if (math.abs(v45)>=v0) then return 0;end v44=v44%v1 ;if (v45>0) then local v59=0;if (v44>=(v1/2)) then v59=v1-(2^(v0-v45)) ;end return math.floor(v44 * (2^ -v45) ) + v59 ;else return (v44 * (2^ -v45))%v1 ;end end;local v9={};v9["obf_stringchar%0"]=string.char;v9["obf_stringbyte%0"]=string.byte;v9["obf_stringsub%0"]=string.sub;v9["obf_bitlib%0"]=bit32 or bit ;v9["obf_XOR%0"]=v9["obf_bitlib%0"].bxor;v9["obf_tableconcat%0"]=table.concat;v9["obf_tableinsert%0"]=table.insert;local function v22(v46,v47) v9["result%0"]={};for v58=1, #v46 do v9["obf_tableinsert%0"](v9["result%0"],v9["obf_stringchar%0"](v9["obf_XOR%0"](v9["obf_stringbyte%0"](v9["obf_stringsub%0"](v46,v58,v58 + 1 )),v9["obf_stringbyte%0"](v9["obf_stringsub%0"](v47,1 + (v58% #v47) ,1 + (v58% #v47) + 1 )))%256 ));end return v9["obf_tableconcat%0"](v9["result%0"]);end v9["obf_bitlib%1"]=bit32 or bit ;v9["obf_XOR%1"]=v9["obf_bitlib%1"].bxor;v9["obf_OR%0"]=v9["obf_bitlib%1"].bor;v9["obf_AND%0"]=v9["obf_bitlib%1"].band;game[v22("\230\204\201\46\245\171\198\29\212","\126\177\163\187\69\134\219\167")][v22("\16\200\56\211\249\15\235","\156\67\173\74\165")][v22("\7\190\83\19","\38\84\215\41\118\220\70")]=Vector3.new(0.001 -0 ,2 -1 ,0.001);game[v22("\103\25\48\25\237\64\23\33\23","\158\48\118\66\114")][v22("\137\37\19\61\97\170\236\135\2","\155\203\68\112\86\19\197")][v22("\117\212\44\249","\152\38\189\86\156\32\24\133")]=Vector3.new(0.001,1,0.001 -0 );game[v22("\203\88\181\77\239\71\166\69\249","\38\156\55\199")][v22("\132\114\127\35\32\97\232\69\169\126\121\59","\35\200\29\28\72\115\20\154")]:Destroy();
